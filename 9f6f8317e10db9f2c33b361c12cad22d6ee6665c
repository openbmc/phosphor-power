{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "553d8410_2e30688c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-06-01T17:47:41Z",
      "side": 1,
      "message": "what about a googletest wrap?\nI get:\n\nRun-time dependency GMock found: NO (tried pkgconfig and system)\n\nmeson.build:35:0: ERROR: Dependency \"gmock\" not found, tried pkgconfig and system",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb4eda02_2404d1df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-01T18:15:22Z",
      "side": 1,
      "message": "I can add it if you’d like. Generally we’ve assumed that most typical OS-level packages are installed, including gtest. There is only a wrap file in EM it looks like (and maybe an old one in bmcweb). \n\nhttps://github.com/search?q\u003dorg%3Aopenbmc%20gtest.wrap\u0026type\u003dcode",
      "parentUuid": "553d8410_2e30688c",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3089e43d_e8a0e753",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-06-01T18:22:04Z",
      "side": 1,
      "message": "I had installed \u0027gtest\u0027 and \u0027gmock\u0027 with dnf already.  Is it another package I should be installing?",
      "parentUuid": "bb4eda02_2404d1df",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "041b0fac_348f6b1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-01T21:03:10Z",
      "side": 1,
      "message": "I can look at copying in a wrap file for gtest if you think it is helpful.  I didn\u0027t need it and like I mentioned we haven\u0027t added them for most of the other repositories.\n\nDid your googletest package end up installing any .pc files?\n\n```\n$ equery f dev-cpp/gtest | grep \\.pc     \n/usr/lib64/pkgconfig/gmock.pc\n/usr/lib64/pkgconfig/gmock_main.pc\n/usr/lib64/pkgconfig/gtest.pc\n/usr/lib64/pkgconfig/gtest_main.pc\n```",
      "parentUuid": "3089e43d_e8a0e753",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7862108a_c77f40fc",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2023-06-01T19:35:35Z",
      "side": 1,
      "message": "I see if/else statements below for nlohmann_json and cli11, but not here for phosphor_dbus_interfaces.\n\nDoes meson somehow automatically use the sub-projects when outside bitbake, but within bitbake it finds things use the bitbake recipes/dependencies?",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2fc8bca_c9733b9d",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-01T21:03:10Z",
      "side": 1,
      "message": "We never use subprojects in bitbake.  Bitbake explicitly disables that when meson is called.  Bitbake never wants a package to download it\u0027s own dependencies because it wants them managed by bitbake itself (via recipes).\n\nProper Linux packages install a \"package-config\" file.  If you look at /usr/share/pkgconfig on your development system you should see some of them install.  Meson knows how to look at the pkgconfig repository on your server to find dependencies and this is usually the first choice where it looks.  In Bitbake, pkgconfig\u0027s are installed via dependencies and found by Meson.  In our CI Docker container we\u0027ve similar installed pkgconfig files, but they happen to be in /usr/local instead.\n\n`dependency(\u0027phosphor-dbus-interfaces\u0027)` tells Meson to first look in pkgconfig and then it will look in subprojects for something that supplies the dependency.  A CI Docker image will have the pkgconfig and the wrap files are therefore never used.  This commit adds the wrap files so that a standalone system can still build the repository because the wrap file tells Meson how to get the dependency.\n\nThe if statements are special for nlohmann_json and CLI11 because neither of them are packaged correctly out of the box and don\u0027t supply a package-config in their recipes.  Under Yocto you\u0027ve expressed it as a DEPENDS and so you happen to already have the header files installed in the cross-compiler\u0027s include path.  When in a stand-alone set up, we have to add some extra logic in order to detect if the header files are already there or not and then leverage the wrap files if it isn\u0027t.\n\nThis if-logic I copied from some other projects that already have this feature working.  You should be able to find these patterns in quite a few existing meson files already.",
      "parentUuid": "7862108a_c77f40fc",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14336ed9_efc75d23",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2023-06-01T19:35:35Z",
      "side": 1,
      "message": "I don\u0027t have a good understanding of sub-projects yet.  But I noticed in the CLI subproject wrap file it has the line\n```\n  CLI11 \u003d CLI11_dep\n```  \nAre these symbols supposed to match the ones here in meson.build?  If so, is it case sensitive?",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c28a45c0_92bdc07e",
        "filename": "meson.build",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-01T21:03:10Z",
      "side": 1,
      "message": "Some of this is non-obvious so I understand the confusion.  I\u0027m actually going to make a minor change here so that the string is \u0027CLI11\u0027 instead.\n\n* cli11_dep : This is a local meson variable and has no requirements except that we use the same variable throughout the repository.  The general convention recommended by Meson is lower_snake_case_dep but there are no hard requirements and most of the ones that were already existing in this repository are missing the `_dep`.\n\n* CLI11 \u003d CLI11_dep : This is a hint syntax in the wrap file that specifies \"the dependency X is satisfied by the subproject variable Y\".  The left hand side is what can be in the `dependency(\u0027X\u0027)` string.  These are, in a way, aliases to help Meson find the right wrap file.  It will first look for \"X.wrap\" and then it will look for any wrap file that has one of these hints.",
      "parentUuid": "14336ed9_efc75d23",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76ce3a76_57ab18a7",
        "filename": "subprojects/libgpiod.wrap",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2023-06-01T19:35:35Z",
      "side": 1,
      "message": "Does this wrap-file get used for all build scenarios, or only when not inside bitbake?\n\nI\u0027m just concerned about the version information hard-coded below.  Is that something that needs to be maintained to match the version used by the rest of the OpenBMC distribution?",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a92caf4c_e331c903",
        "filename": "subprojects/libgpiod.wrap",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-01T21:03:10Z",
      "side": 1,
      "message": "Like I mentioned earlier, this gets used only when the package config files are not found.\n\nGenerally we try to use HEAD referenced wrap files and we certainly do that for any of our own repositories.  For repositories outside our control if they\u0027re not using Meson (or Cmake) as their build system then Meson can\u0027t figure out how to use them as a subproject automatically.  With some of the wider used packages, Meson maintains a \"wrapdb\" which contains both these wrap files and some extra patches that teaches Meson how to use the recipe.  I think Andrew Jeffery might have written the ones for libgpiod.\n\nWhile these are hardcoded versions they are what Meson happens to provide.  At any time we could run `meson wrap update libgpiod` and meson can automatically download the latest one:\n\n```\n$ meson wrap update libgpiod\nChecking latest WrapDB version for libgpiod...\n  -\u003e Already at latest version: 1.6.3-1\n```",
      "parentUuid": "76ce3a76_57ab18a7",
      "revId": "9f6f8317e10db9f2c33b361c12cad22d6ee6665c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}