{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "309887e9_e5f80529",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 284,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2022-06-03T17:59:37Z",
      "side": 1,
      "message": "In the base class, I noticed it does not create a BMC dump if this is a powerSupplyError.  Do we need to add the same check here?",
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d03004e_e7117964",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 284,
      "author": {
        "id": 1000387
      },
      "writtenOn": "2022-06-04T17:13:06Z",
      "side": 1,
      "message": "Good catch.  I updated the base class. I want to call for dump creation anytime the failure is at runtime, whether the power supply error is used or not.",
      "parentUuid": "309887e9_e5f80529",
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d0cb66f_726fc7a7",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2022-06-03T17:59:37Z",
      "side": 1,
      "message": "Is your intent to catch this specific exception type and allow others to continue to an outer catch?\n\nWhile you can throw any data type in C++, the root of the built-in exception tree is std::exception.  So that is what people usually catch if they want to catch any exception from an underlying library call.",
      "range": {
        "startLine": 315,
        "startChar": 22,
        "endLine": 315,
        "endChar": 34
      },
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "348d1842_3b6507b6",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1000387
      },
      "writtenOn": "2022-06-04T17:13:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d0cb66f_726fc7a7",
      "range": {
        "startLine": 315,
        "startChar": 22,
        "endLine": 315,
        "endChar": 34
      },
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d5077e5_66a2314c",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 323,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2022-06-03T17:59:37Z",
      "side": 1,
      "message": "Might help to document what is special about 84 and why it must be handled differently.  It seems like you are printing all 84 but are providing better labels?",
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14d98b7b_2820de30",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 323,
      "author": {
        "id": 1000387
      },
      "writtenOn": "2022-06-04T17:13:06Z",
      "side": 1,
      "message": "Done, the check is really just to make sure I don\u0027t go over the size of the array. I subdivided the pins mostly because is was really hard to count correctly in the set of 84.",
      "parentUuid": "8d5077e5_66a2314c",
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d66ab5c5_8b3a2419",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 446,
      "author": {
        "id": 1001082
      },
      "writtenOn": "2022-06-03T16:33:40Z",
      "side": 1,
      "message": "just confirming you no longer want to return here?",
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d295cb19_84dbfbd0",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 446,
      "author": {
        "id": 1000387
      },
      "writtenOn": "2022-06-03T17:07:23Z",
      "side": 1,
      "message": "That\u0027s correct. The intent of this change is to continue to set the message / RAIL_NAME (which determines the call outs in the PEL) on the fist fail found, but now continue through the full set of rails to capture all the rails with VOUT fails.",
      "parentUuid": "d66ab5c5_8b3a2419",
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed451407_bfa039c7",
        "filename": "phosphor-power-sequencer/src/ucd90320_monitor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 446,
      "author": {
        "id": 1001082
      },
      "writtenOn": "2022-06-03T17:16:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d295cb19_84dbfbd0",
      "revId": "3a9c9147b3a3e120c286a58187acfa52b435cf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}